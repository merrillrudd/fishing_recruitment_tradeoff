{
    "contents" : "\n# This is the server logic for a Shiny web application.\n# You can find out more about building applications with Shiny here:\n#\n# http://shiny.rstudio.com\n#\n\nlibrary(shiny)\n\nshinyServer(function(input, output) {\n  \n  SimData <- function(Nyears, AgeMax, SigmaR, M, F1, S_a, \n                      SigmaF, Fdynamics, Rdynamics, R0, CVlen, mids, highs, lows,\n                      W_a, L_a, Mat_a, Amat, Fequil, comp_sample=1000,\n                      nburn=50){\n    \n    ## SB_t = spawning biomass over time\n    ## F_t = fishing mortality over time\n    ## Cn_at = number of individuals that die from fishing mortality\n    ## N_at = abundance by number at age over time\n    \n    ##########################\n    ## Initial calcs\n    ##########################\n    \n    tyears <- nburn+Nyears\n    \n    \n    ##########################\n    ## Random variables\n    ##########################\n    \n    RecDev <- rnorm(tyears, mean=-(SigmaR^2)/2, sd=SigmaR)\n    FishDev <- rnorm(tyears, mean=-(SigmaF^2)/2, sd=SigmaF)\n    \n    ##########################\n    ## Data objects\n    ##########################\n    SB_t <- F_t <- R_t <- rep(NA, tyears)\t\t\t\t\t\t\t\t\n    Cn_at <- N_at <- matrix(NA, nrow=AgeMax+1, ncol=tyears)\n    \n    #####################################\n    ## Fishing and recruitment dynamics\n    #####################################\t\n    \n    if(Fdynamics==\"Ramp\") Framp_t <- c(rep(0.01, nburn), \"rampup\"=seq(F1, Fmax, length=floor(Nyears/2)), \n                                       \"peak\"=rep(Fmax, floor((Nyears-floor(Nyears/2))/2)), \n                                       \"managed\"=rep(Fmax/3, Nyears-floor(Nyears/2)-floor((Nyears-floor(Nyears/2))/2)))\n    if(Fdynamics==\"Constant\") Fconstant_t <- rep(Fequil, tyears)\n    if(Fdynamics==\"Increasing\") Finc_t <- c(rep(0, nburn), ((1-0.01)/(Nyears-1))*1:Nyears)\n    \n    if(Rdynamics==\"Pulsed\") Rpulse_t <- c(rep(R0, nburn), \"initial\"=rep(R0, floor(Nyears/3)),\n                                          \"pulse_up\"=rep(R0*3, floor(Nyears/3)), \"pulse_down\"=rep(R0, Nyears-floor(Nyears/3)))\n    if(Rdynamics==\"Constant\") Rconstant_t <- rep(R0, tyears)\n    \n    ##########################\n    ## Initialization\n    ##########################\n    if(Fdynamics==\"Endogenous\") F_t[1] <- 0.01\n    if(Fdynamics==\"Ramp\") F_t[1] <- Framp_t[1]\n    if(Fdynamics==\"Constant\") F_t[1] <- Fconstant_t[1]\n    if(Fdynamics==\"Increasing\") F_t[1] <- Finc_t[1]\n    \n    R_t[1] <- R0\n    \n    ## year 1\n    for(a in 1:length(L_a)){\n      if(a==1){\n        N_at[a,1] <- R_t[1]\n      }\n      if(a>1 & a<length(L_a)){\n        N_at[a,1] <- N_at[a-1,1]*exp(-M-F_t[1]*S_a[a-1])\n      }\n      if(a==length(L_a)){\n        N_at[a,1] <- (N_at[a-1,1]*exp(-M-F_t[1]*S_a[a-1]))/(1-exp(-M-F_t[1]*S_a[a-1]))\n      }\n      \n    }\n    SB_t[1] <- sum(N_at[,1] * W_a * S_a)\n    Cn_at[,1] <- N_at[,1] * (1-exp(-M - F_t[1]*S_a)) * (F_t[1]*S_a)/(M+F_t[1]*S_a)\n    \n    ##########################\n    ## Projection\n    ##########################\n    Na0 <- rep(NA, length(W_a))\n    if(Rdynamics==\"Pulsed\"){\n      R0 <- median(Rpulse_t[-c(1:nburn)])\n    }\n    Na0[1] <- R0\n    for(a in 2:length(W_a)){\n      Na0[a] <- R0 * exp(-M*(a-1))\n    }\n    SB0 <- sum(Na0[-1]*Mat_a[-1]*W_a[-1])\n    \n    for(y in 2:tyears){\n      ## fishing effort and recruitment, not dependent on age structure\n      if(Fdynamics==\"Endogenous\"){\n        if(y <= nburn) F_t[y] <- 0.01\n        if(y > nburn) F_t[y] <- F_t[y-1]*(SB_t[y-1]/(Fequil*SB0))^Frate * exp(FishDev[y])\n      }\n      if(Fdynamics==\"Ramp\"){\n        F_t[y] <- Framp_t[y] * exp(FishDev[y])\n      }\n      if(Fdynamics==\"Constant\"){\n        F_t[y] <- Fconstant_t[y] * exp(FishDev[y])\n      }\n      if(Fdynamics==\"Increasing\"){\n        F_t[y] <- Finc_t[y] * exp(FishDev[y])\n      }\n      if(Rdynamics==\"Constant\"){\n        R_t[y] <- Rconstant_t[y] * exp(RecDev[y])\n      }\n      if(Rdynamics==\"Pulsed\"){\n        R_t[y] <- Rpulse_t[y] * exp(RecDev[y])\n      }\n      if(Rdynamics==\"BH\"){\n        R_t[y] <- (4 * h * R0 * SB_t[y-1] / ( SB0*(1-h) + SB_t[y-1]*(5*h-1))) * exp(RecDev[y])\n      }\n      \n      ## age-structured dynamics\n      for(a in 1:length(L_a)){\n        if(a==1){\n          N_at[a,y] <- R_t[y]\n        }\n        if(a>1 & a<length(L_a)){\n          N_at[a,y] <- N_at[a-1,y-1]*exp(-M-F_t[y-1]*S_a[a-1])\n        }\n        if(a==length(L_a)){\n          N_at[a,y] <- (N_at[a-1,y-1] + N_at[a,y-1])*exp(-M-F_t[y-1]*S_a[a-1])\n        }\n      }\n      ## spawning biomass\n      SB_t[y] <- sum((N_at[,y] * W_a * Mat_a)[-1])\n      ## catch\n      Cn_at[,y] <- N_at[,y] * (1-exp(-M-F_t[y]*S_a)) * (F_t[y]*S_a)/(M+F_t[y]*S_a)\n    }\n    Cn_t <- colSums(Cn_at)\n    C_t <- Cn_t\n    N_t <- colSums(N_at[-1,])\n    D_t <- SB_t/SB0\n    \n    ################################################\n    ## Probability being in a length bin given age\n    ################################################\n    lbprobs <- function(mnl,sdl) return(pnorm(highs,mnl,sdl)-pnorm(lows,mnl,sdl))\n    vlprobs <- Vectorize(lbprobs,vectorize.args=c(\"mnl\",\"sdl\"))\n    plba <- t(vlprobs(L_a,L_a*CVlen))\n    plba <- plba/rowSums(plba)\n    \n    ################################################\n    ## Probability being in harvested at an age\n    ################################################\n    page <- matrix(ncol=dim(plba)[1], nrow=tyears)\n    for (y in 1:tyears) page[y,] <- N_at[,y] * S_a\n    page <- page/rowSums(page)    \n    \n    ################################################\n    ## Probability of sampling a given length bin\n    ################################################\n    plb <- matrix(ncol=length(mids), nrow=tyears)\n    for (y in 1:tyears) plb[y,] <- page[y,] %*% plba\n    plb <- plb/rowSums(plb)    \n    \n    #######################\n    ## Length frequencies \n    #######################\n    LF <- array(0, dim=dim(plb))\n    rownames(LF) <- 1:tyears\n    for(y in 1:tyears){\n      LF[y,] <- rmultinom(n=1, size=comp_sample, prob=plb[y,])\n    }\n    \n    ML_t <- rowMeans(LF*mids)\n    \n    \n    ########################################################\n    ## True mean length in vulnerable population each year \n    ########################################################\n    L_t <- vector(length=tyears)\n    VL <- matrix(NA, nrow=tyears, ncol=ncol(plb))\n    for(y in 1:tyears){\n      vul_pop <- sum(N_at[,y]*S_a)\n      vul_lengths <- sum(vul_pop*plb[y,]*mids)\n      VL[y,] <- vul_pop*plb[y,]*mids\n      L_t[y] <- vul_lengths/vul_pop\n    }\n    \n    ########################################################\n    ## cut out burn-in\n    ########################################################\n    \n    LFout <- LF[-c(1:nburn),]\n    rownames(LFout) <- 1:Nyears\n    \n    C_tout <- C_t[-c(1:nburn)]\n    \n    R_tout <- R_t[-c(1:nburn)]\n    N_tout <- N_t[-c(1:nburn)]\n    SB_tout <- SB_t[-c(1:nburn)]\n    D_tout <- D_t[-c(1:nburn)]\n    F_tout <- F_t[-c(1:nburn)]\n    L_tout <- L_t[-c(1:nburn)]\n    N_atout <- N_at[,-c(1:nburn)]\n    VL_out <- VL[-c(1:nburn),]\n    \n    \n    DataList <- list(\"C_t\"=C_tout, \"VL\"=VL_out,\n                     \"LF\"=LFout, \"SigmaR\"=SigmaR, \"R_t\"=R_tout, \"N_t\"=N_tout, \"SB_t\"=SB_tout, \"D_t\"=D_tout, \"F_t\"=F_tout, \n                     \"L_t\"=L_tout, \"N_at\"=N_atout, \"Amat\"=Amat, \"Mat_a\"=Mat_a, \"SB0\"=SB0, \"Nyears\"=Nyears, \"L_a\"=L_a,\n                     \"W_a\"=W_a, \"AgeMax\"=AgeMax, \"M\"=M, \"S_a\"=S_a, \"plb\"=plb, \"plba\"=plba, \"page\"=page, \"R0\"=R0)\n    \n    return(DataList)\n  }\n  \n  \n  get_sim <- function(error){\n    \n    Sa50 <- round(input$t0 - log(1-(input$S50/input$linf))/input$vbk)\n    Ma50 <- round(input$t0 - log(1-(input$M50/input$linf))/input$vbk)\n    \n    S_a <- 1/(1+exp(Sa50 - 0:input$AgeMax))\n    Mat_a <- 1/(1+exp(Ma50 - 0:input$AgeMax))\n    L_a <- input$linf*(1-exp(-input$vbk*(0:input$AgeMax - input$t0)))\n    W_a <- input$lwa * L_a ^ input$lwb\n    binwidth <- 1\n    mids <- seq((binwidth/2), input$linf*1.2, by=binwidth)\n    highs <- mids + (binwidth/2)\n    lows <- mids - (binwidth/2)\n    ages <- c(0:input$AgeMax)\n    \n    if(error==TRUE){\n      SigmaR <- 0.6\n      SigmaF <- 0.3\n    }\n    if(error==FALSE){\n      SigmaR <- SigmaF <- 0\n    }\n    \n    set.seed(1234)\n    simdata <- SimData(Nyears=input$nyears, AgeMax=input$AgeMax, \n                       SigmaR=SigmaR, M=input$M, F1=0.01, S_a=S_a, \n                       SigmaF=SigmaF, W_a=W_a, L_a=L_a, Mat_a=Mat_a, \n                       Amat=Ma50, Fdynamics=input$f_options, \n                       Rdynamics=input$rec_options, Fequil=0.2, R0=1000,\n                       CVlen=0.2, highs=highs, mids=mids, lows=lows)\n\n    \n    return(simdata)\n    \n  }\n\n  output$MLplot <- renderPlot({\n    pop <- get_sim(error=FALSE)\n    L_t <- get_sim(error=FALSE)$L_t\n    rL_t <- L_t/L_t[1]\n    if(input$error==TRUE){\n      L_t2 <- get_sim(error=TRUE)$L_t\n      rL_t2 <- L_t2/L_t2[1]\n    }\n    years <- 1:input$nyears\n    plot(years, rL_t, lwd=4, pch=19, type=\"o\", ylim=c(0, max(rL_t)*1.5),\n         ylab=\"Observed mean length in catch\", col=gray(0.2), xlab=\"Year\", yaxt=\"n\")\n    axis(2, at=pretty(c(0, max(rL_t)*1.5)), las=2)\n    if(input$error==TRUE) lines(rL_t2, lty=2, col=gray(0.2), lwd=2)\n  })\n  \n  output$Fplot <- renderPlot({\n    F_t <- get_sim(error=FALSE)$F_t\n    if(input$error==TRUE) F_t2 <- get_sim(error=TRUE)$F_t\n    years <- 1:input$nyears\n    plot(years, F_t, lwd=4, pch=19, type=\"o\", ylim=c(0, 1.5),\n         ylab=\"True fishing mortality\", col=\"forestgreen\", xlab=\"Year\", yaxt=\"n\")\n    axis(2, at=pretty(c(0,1.5)), las=2)\n    if(input$error==TRUE) lines(F_t2, lty=2, col=\"forestgreen\", lwd=2)\n  })\n  \n  output$Rplot <- renderPlot({\n    R_t <- get_sim(error=FALSE)$R_t\n    if(input$error==TRUE) R_t2 <- get_sim(error=TRUE)$R_t\n    years <- 1:input$nyears\n    plot(years, R_t, lwd=4, pch=19, type=\"o\", ylim=c(0, 5000),\n         ylab=\"True recruitment\", col=\"steelblue\", xlab=\"Year\", yaxt=\"n\")\n    axis(2, at=pretty(c(0,5000)), las=2)\n    if(input$error==TRUE) lines(R_t2, lty=2, col=\"steelblue\", lwd=2)\n  })\n  \n  output$LFplot <- renderPlot({\n    VL <- get_sim(error=FALSE)$VL\n    relVL1 <- VL[1,]/max(VL[1,])\n    relVL2 <- VL[round(input$nyears)/2,]/max(VL[round(input$nyears)/2,])\n    \n    plot(x=1, y=1, type=\"n\", xlim=c(0, 90), ylim=c(0, 1), axes=F, xaxs=\"i\", yaxs=\"i\", ann=F)\n    polygon(x=c(seq(0,90,length=length(relVL1)), seq(90, 0, length=length(relVL1))),\n            y=c(rep(0, length(relVL1)), rev(relVL1)), col=\"#AAAAAA70\")\n    polygon(x=c(seq(0,90,length=length(relVL2)), seq(90,0,length=length(relVL2))),\n            y=c(rep(0, length(relVL2)), rev(relVL2)), col=\"#AA000070\")\n    axis(1, at=pretty(c(0,90)))\n    mtext(side=1, \"Length\", line=3)\n    axis(2, at=pretty(c(0,1)), las=2)\n    mtext(side=2, \"Relative proportion\", line=3)\n    \n#     barplot(VL[1,]/max(VL[1,]), col=\"#AAAAAA70\", xlim=c(0,80), ylim=c(0,1))\n#     par(new=TRUE)\n#     barplot(VL[10,]/max(VL[10,]), col=\"#AA000070\", xlim=c(0,80), ylim=c(0,1))\n    \n  })\n\n  output$LFlegend <- renderPlot({\n    \n    plot(x=1, y=1, type=\"n\", axes=F, ann=F, xlim=c(0,10), ylim=c(0,10))\n    legend(\"top\", legend=c(\"Unfished equilibrium\", \"Perturbed\"),\n           col=c(\"#AAAAAA70\", \"#AA000070\"), border=NA, cex=2.2, pch=15)\n    \n  })\n  \n\n\n  \n\n  \n})",
    "created" : 1458678239975.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3461449897",
    "id" : "B598DA19",
    "lastKnownWriteTime" : 1460483762,
    "path" : "C:/Git_Projects/fishing_recruitment_tradeoff/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}