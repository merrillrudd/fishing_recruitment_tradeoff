return(simdata)
}
LFf <- get_sim(error=NULL, equil=TRUE, unfished=FALSE)
LF0 <- get_sim(error=NULL, equil=TRUE, unfished=TRUE)
input <- NULL
input$t0 <- 1e-3
input$t0 <- -1e-3
input$S50 <- 30
input$M50 <- 30
input$linf <- 60
input$vbk <- 0.2
input$AgeMax <- 15
input$lwa <- 0.02
input$lwb <- 3
input$rec_level <- "Status quo"
input$fish_level <- "Status quo"
input$f_options <- "Constant"
iput$rec_options <- "Constant"
input$rec_options <- "Constant"
LFf <- get_sim(error=NULL, equil=TRUE, unfished=FALSE)
LF0 <- get_sim(error=NULL, equil=TRUE, unfished=TRUE)
LFf <- get_sim(error=FALSE, equil=TRUE, unfished=FALSE)
LF0 <- get_sim(error=FALSE, equil=TRUE, unfished=TRUE)
shiny::runApp()
shiny::runApp()
shiny::runApp()
binwidth <_ 1
binwidth <- 1
input$linf <- 60
input <- NULL
input$linf <- 60
mids <- seq((binwidth/2), input$linf*1.2, by=binwidth)
mids
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
input <- NULL
input$t0 <- -1e-3
input$S50 <- 15
input$linf <- 70
input$vbk <- 0.1
input$AgeMax <- 13
input$lwa <- 0.02
input$lwb <- 3
input$M <- 0.2
input <- NULL
input$t0 <- -1e-3
input$S50 <- 15
input$linf <- 70
input$vbk <- 0.1
input$AgeMax <- 13
input$lwa <- 0.02
input$lwb <- 3
input$M <- 0.2
input$F1 <- 0.2
input$F2 <- 0.5
input$R1 <- 1
input$R2 <- 1
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
get_sim_snapshot <- function(F1, F2, R1, R2){
Sa50 <- round(input$t0 - log(1-(input$S50/input$linf))/input$vbk)
Ma50 <- round(input$t0 - log(1-(input$M50/input$linf))/input$vbk)
S_a <- 1/(1+exp(Sa50 - 0:input$AgeMax))
Mat_a <- 1/(1+exp(Ma50 - 0:input$AgeMax))
L_a <- input$linf*(1-exp(-input$vbk*(0:input$AgeMax - input$t0)))
W_a <- input$lwa * L_a ^ input$lwb
binwidth <- 1
mids <- seq((binwidth/2), input$linf*1.2, by=binwidth)
highs <- mids + (binwidth/2)
lows <- mids - (binwidth/2)
ages <- c(0:input$AgeMax)
set.seed(1234)
### change input to be higher or status quo, then adjust values accordingly
simdata <- SimData_snapshot(Nyears=3, AgeMax=input$AgeMax, F1=F1, F2=F2, R1=R1, R2=R2,
SigmaR=0, M=input$M, S_a=S_a,
SigmaF=0, W_a=W_a, L_a=L_a, Mat_a=Mat_a,
Amat=Ma50, CVlen=0.2, highs=highs, mids=mids, lows=lows)
return(simdata)
}
input <- NULL
input$t0 <- -1e3
input$S50 <- 35
input$linf <- 65
input$vbk <- 0.1
input$M50 <- 35
input$lwa <- 0.025
input$lwb <- 3
input$AgeMax <- 15
input$M <- 0.025
F1 <- 0.2
R1 <- 1000
if(input$fish_level=="Higher") F2 <- 0.5
if(input$rec_level=="Higher") R2 <- 3000
if(input$fish_level=="Status quo") F2 <- F1
if(input$rec_level=="Status quo") R2 <- R1
sim_snap <- get_sim_snapshot(F1=F1, F2=F2, R1=R1, R2=R2)
sim_snap0 <- get_sim_snapshot(F1=0, F2=0, R1=R1, R2=R2)
input$fish_level <- "Status quo"
input$rec_level <- "Status quo"
F1 <- 0.2
R1 <- 1000
if(input$fish_level=="Higher") F2 <- 0.5
if(input$rec_level=="Higher") R2 <- 3000
if(input$fish_level=="Status quo") F2 <- F1
if(input$rec_level=="Status quo") R2 <- R1
sim_snap <- get_sim_snapshot(F1=F1, F2=F2, R1=R1, R2=R2)
sim_snap0 <- get_sim_snapshot(F1=0, F2=0, R1=R1, R2=R2)
sim_snap
sim_snap0
barplot(sim_snap0[3,], ylim=c(0,max(sim_snap0)*1.5), col="gray")
par(new=TRUE)
barplot(sim_snap[3,], ylim=c(0, max(sim_snap0)*1.5), col="blue")
barplot(sim_snap0[3,], ylim=c(0,max(sim_snap0)*1.5), col="gray")
par(new=TRUE)
barplot(sim_snap[3,], ylim=c(0, max(sim_snap0)*1.5), col="blue")
barplot(sim_snap0[3,], ylim=c(0,max(sim_snap0)*1.5), col="gray")
F_t <- c(rep(0.01, nburn), F1, F2, F2)
nburn <- 50
F_t <- c(rep(0.01, nburn), F1, F2, F2)
F_t
input$fish_level <- "Higher"
F1 <- 0.2
R1 <- 1000
if(input$fish_level=="Higher") F2 <- 0.5
if(input$rec_level=="Higher") R2 <- 3000
if(input$fish_level=="Status quo") F2 <- F1
if(input$rec_level=="Status quo") R2 <- R1
sim_snap <- get_sim_snapshot(F1=F1, F2=F2, R1=R1, R2=R2)
sim_snap0 <- get_sim_snapshot(F1=0, F2=0, R1=R1, R2=R2)
barplot(sim_snap0[3,], ylim=c(0,max(sim_snap0)*1.5), col="gray")
par(new=TRUE)
barplot(sim_snap[3,], ylim=c(0, max(sim_snap0)*1.5), col="blue")
F1
F2
source("functions.R")
F1 <- 0.2
R1 <- 1000
if(input$fish_level=="Higher") F2 <- 0.5
if(input$rec_level=="Higher") R2 <- 3000
if(input$fish_level=="Status quo") F2 <- F1
if(input$rec_level=="Status quo") R2 <- R1
sim_snap <- get_sim_snapshot(F1=F1, F2=F2, R1=R1, R2=R2)
sim_snap0 <- get_sim_snapshot(F1=0, F2=0, R1=R1, R2=R2)
sim_snap
get_sim_snapshot
get_sim_snapshot <- function(F1, F2, R1, R2){
Sa50 <- round(input$t0 - log(1-(input$S50/input$linf))/input$vbk)
Ma50 <- round(input$t0 - log(1-(input$M50/input$linf))/input$vbk)
S_a <- 1/(1+exp(Sa50 - 0:input$AgeMax))
Mat_a <- 1/(1+exp(Ma50 - 0:input$AgeMax))
L_a <- input$linf*(1-exp(-input$vbk*(0:input$AgeMax - input$t0)))
W_a <- input$lwa * L_a ^ input$lwb
binwidth <- 1
mids <- seq((binwidth/2), input$linf*1.2, by=binwidth)
highs <- mids + (binwidth/2)
lows <- mids - (binwidth/2)
ages <- c(0:input$AgeMax)
set.seed(1234)
### change input to be higher or status quo, then adjust values accordingly
simdata <- SimData_snapshot(AgeMax=input$AgeMax, F1=F1, F2=F2, R1=R1, R2=R2,
SigmaR=0, M=input$M, S_a=S_a,
SigmaF=0, W_a=W_a, L_a=L_a, Mat_a=Mat_a,
Amat=Ma50, CVlen=0.2, highs=highs, mids=mids, lows=lows)
return(simdata)
}
F1 <- 0.2
R1 <- 1000
if(input$fish_level=="Higher") F2 <- 0.5
if(input$rec_level=="Higher") R2 <- 3000
if(input$fish_level=="Status quo") F2 <- F1
if(input$rec_level=="Status quo") R2 <- R1
sim_snap <- get_sim_snapshot(F1=F1, F2=F2, R1=R1, R2=R2)
sim_snap0 <- get_sim_snapshot(F1=0, F2=0, R1=R1, R2=R2)
sim_snap
source("functions.R")
F1 <- 0.2
R1 <- 1000
if(input$fish_level=="Higher") F2 <- 0.5
if(input$rec_level=="Higher") R2 <- 3000
if(input$fish_level=="Status quo") F2 <- F1
if(input$rec_level=="Status quo") R2 <- R1
sim_snap <- get_sim_snapshot(F1=F1, F2=F2, R1=R1, R2=R2)$plb
sim_snap0 <- get_sim_snapshot(F1=0, F2=0, R1=input$R1, R2=input$R2)$plb
source("functions.R")
F1 <- 0.2
R1 <- 1000
if(input$fish_level=="Higher") F2 <- 0.5
if(input$rec_level=="Higher") R2 <- 3000
if(input$fish_level=="Status quo") F2 <- F1
if(input$rec_level=="Status quo") R2 <- R1
sim_snap <- get_sim_snapshot(F1=F1, F2=F2, R1=R1, R2=R2)$plb
sim_snap0 <- get_sim_snapshot(F1=0, F2=0, R1=input$R1, R2=input$R2)$plb
sim_snap
shiny::runApp()
shiny::runApp()
get_sim_snapshot <- function(F1, F2, R1, R2){
Sa50 <- round(input$t0 - log(1-(input$S50/input$linf))/input$vbk)
Ma50 <- round(input$t0 - log(1-(input$M50/input$linf))/input$vbk)
S_a <- 1/(1+exp(Sa50 - 0:input$AgeMax))
Mat_a <- 1/(1+exp(Ma50 - 0:input$AgeMax))
L_a <- input$linf*(1-exp(-input$vbk*(0:input$AgeMax - input$t0)))
W_a <- input$lwa * L_a ^ input$lwb
binwidth <- 1
mids <- seq((binwidth/2), input$linf*1.2, by=binwidth)
highs <- mids + (binwidth/2)
lows <- mids - (binwidth/2)
ages <- c(0:input$AgeMax)
set.seed(1234)
### change input to be higher or status quo, then adjust values accordingly
simdata <- SimData_snapshot(AgeMax=input$AgeMax, F1=F1, F2=F2, R1=R1, R2=R2,
SigmaR=0, M=input$M, S_a=S_a,
SigmaF=0, W_a=W_a, L_a=L_a, Mat_a=Mat_a,
Amat=Ma50, CVlen=0.2, highs=highs, mids=mids, lows=lows)
return(simdata)
}
F1 <- 0.2
R1 <- 1000
if(input$fish_level=="Higher") F2 <- 0.5
if(input$rec_level=="Higher") R2 <- 3000
if(input$fish_level=="Status quo") F2 <- F1
if(input$rec_level=="Status quo") R2 <- R1
sim_snap <- get_sim_snapshot(F1=F1, F2=F2, R1=R1, R2=R2)
sim_snap0 <- get_sim_snapshot(F1=0, F2=0, R1=R1, R2=R2)
input <- NULL
input$t0 <- -1e3
input$S50 <- 35
input$linf <- 65
input$vbk <- 0.1
input$M50 <- 35
input$lwa <- 0.025
input$lwb <- 3
input$AgeMax <- 15
input$M <- 0.025
input$fish_level <- "Higher"
input$rec_level <- "Status quo"
F1 <- 0.2
R1 <- 1000
if(input$fish_level=="Higher") F2 <- 0.5
if(input$rec_level=="Higher") R2 <- 3000
if(input$fish_level=="Status quo") F2 <- F1
if(input$rec_level=="Status quo") R2 <- R1
sim_snap <- get_sim_snapshot(F1=F1, F2=F2, R1=R1, R2=R2)
sim_snap0 <- get_sim_snapshot(F1=0, F2=0, R1=R1, R2=R2)
sim_snap
names(sim_snap)
sim_snap$N_t
plot(sim_snap$N_t)
dim(sim_snap$plb)
sim_snap$plb
source("functions.R")
F1 <- 0.2
R1 <- 1000
if(input$fish_level=="Higher") F2 <- 0.5
if(input$rec_level=="Higher") R2 <- 3000
if(input$fish_level=="Status quo") F2 <- F1
if(input$rec_level=="Status quo") R2 <- R1
sim_snap <- get_sim_snapshot(F1=F1, F2=F2, R1=R1, R2=R2)
sim_snap0 <- get_sim_snapshot(F1=0, F2=0, R1=R1, R2=R2)
sim_snap$N-t
sim_snap$N_t
sim_snap$plb
rowSums(sim_snap$plb)
source("functions.R")
F1 <- 0.2
R1 <- 1000
if(input$fish_level=="Higher") F2 <- 0.5
if(input$rec_level=="Higher") R2 <- 3000
if(input$fish_level=="Status quo") F2 <- F1
if(input$rec_level=="Status quo") R2 <- R1
sim_snap <- get_sim_snapshot(F1=F1, F2=F2, R1=R1, R2=R2)
sim_snap0 <- get_sim_snapshot(F1=0, F2=0, R1=R1, R2=R2)
sim_snap
barplot(page[60,])
barplot(sim_snap$page[60,])
barplot(sim_snap$page[59,])
barplot(sim_snap$page[58,])
barplot(sim_snap$page[57,])
dim(sim_snap$plb)
source("functions.R")
F1 <- 0.2
R1 <- 1000
if(input$fish_level=="Higher") F2 <- 0.5
if(input$rec_level=="Higher") R2 <- 3000
if(input$fish_level=="Status quo") F2 <- F1
if(input$rec_level=="Status quo") R2 <- R1
sim_snap <- get_sim_snapshot(F1=F1, F2=F2, R1=R1, R2=R2)
sim_snap0 <- get_sim_snapshot(F1=0, F2=0, R1=R1, R2=R2)
sim_snap
source("functions.R")
F1 <- 0.2
R1 <- 1000
if(input$fish_level=="Higher") F2 <- 0.5
if(input$rec_level=="Higher") R2 <- 3000
if(input$fish_level=="Status quo") F2 <- F1
if(input$rec_level=="Status quo") R2 <- R1
sim_snap <- get_sim_snapshot(F1=F1, F2=F2, R1=R1, R2=R2)
sim_snap0 <- get_sim_snapshot(F1=0, F2=0, R1=R1, R2=R2)
sim_snap
source("functions.R")
F1 <- 0.2
R1 <- 1000
if(input$fish_level=="Higher") F2 <- 0.5
if(input$rec_level=="Higher") R2 <- 3000
if(input$fish_level=="Status quo") F2 <- F1
if(input$rec_level=="Status quo") R2 <- R1
sim_snap <- get_sim_snapshot(F1=F1, F2=F2, R1=R1, R2=R2)
sim_snap0 <- get_sim_snapshot(F1=0, F2=0, R1=R1, R2=R2)
sim_snap
if(input$fish_level=="Higher") F2 <- 1
if(input$rec_level=="Higher") R2 <- 3000
if(input$fish_level=="Status quo") F2 <- F1
if(input$rec_level=="Status quo") R2 <- R1
sim_snap <- get_sim_snapshot(F1=F1, F2=F2, R1=R1, R2=R2)
sim_snap0 <- get_sim_snapshot(F1=0, F2=0, R1=R1, R2=R2)
sim_snap
input$nyears <- 20
simdata <- SimData(Nyears=input$nyears, AgeMax=input$AgeMax,
SigmaR=SigmaR, M=input$M, F1=F1, S_a=S_a,
SigmaF=SigmaF, W_a=W_a, L_a=L_a, Mat_a=Mat_a,
Amat=Ma50, Fdynamics=input$f_options,
Rdynamics=input$rec_options, Fequil=Fequil, R0=1000,
CVlen=0.2, highs=highs, mids=mids, lows=lows)
SigmaR <- 0
SigmaF <- 0
simdata <- SimData(Nyears=input$nyears, AgeMax=input$AgeMax,
SigmaR=SigmaR, M=input$M, F1=F1, S_a=S_a,
SigmaF=SigmaF, W_a=W_a, L_a=L_a, Mat_a=Mat_a,
Amat=Ma50, Fdynamics=input$f_options,
Rdynamics=input$rec_options, Fequil=Fequil, R0=1000,
CVlen=0.2, highs=highs, mids=mids, lows=lows)
nburn <- 50
F1 <- 0.01
simdata <- SimData(Nyears=input$nyears, AgeMax=input$AgeMax,
SigmaR=SigmaR, M=input$M, F1=F1, S_a=S_a,
SigmaF=SigmaF, W_a=W_a, L_a=L_a, Mat_a=Mat_a,
Amat=Ma50, Fdynamics=input$f_options,
Rdynamics=input$rec_options, Fequil=Fequil, R0=1000,
CVlen=0.2, highs=highs, mids=mids, lows=lows)
input$f_options <- "Increasing"
input$rec_options <- "Constant"
simdata <- SimData(Nyears=input$nyears, AgeMax=input$AgeMax,
SigmaR=SigmaR, M=input$M, F1=F1, S_a=S_a,
SigmaF=SigmaF, W_a=W_a, L_a=L_a, Mat_a=Mat_a,
Amat=Ma50, Fdynamics=input$f_options,
Rdynamics=input$rec_options, Fequil=Fequil, R0=1000,
CVlen=0.2, highs=highs, mids=mids, lows=lows)
Sa50 <- round(input$t0 - log(1-(input$S50/input$linf))/input$vbk)
Ma50 <- round(input$t0 - log(1-(input$M50/input$linf))/input$vbk)
S_a <- 1/(1+exp(Sa50 - 0:input$AgeMax))
Mat_a <- 1/(1+exp(Ma50 - 0:input$AgeMax))
L_a <- input$linf*(1-exp(-input$vbk*(0:input$AgeMax - input$t0)))
W_a <- input$lwa * L_a ^ input$lwb
binwidth <- 1
mids <- seq((binwidth/2), input$linf*1.2, by=binwidth)
highs <- mids + (binwidth/2)
lows <- mids - (binwidth/2)
ages <- c(0:input$AgeMax)
simdata <- SimData(Nyears=input$nyears, AgeMax=input$AgeMax,
SigmaR=SigmaR, M=input$M, F1=F1, S_a=S_a,
SigmaF=SigmaF, W_a=W_a, L_a=L_a, Mat_a=Mat_a,
Amat=Ma50, Fdynamics=input$f_options,
Rdynamics=input$rec_options, Fequil=Fequil, R0=1000,
CVlen=0.2, highs=highs, mids=mids, lows=lows)
simdata$plba
simdata$plb
simdata$page
pop <- get_sim(error=FALSE)
get_sim <- function(error, F1=0.1, Fequil=0.2){
Sa50 <- round(input$t0 - log(1-(input$S50/input$linf))/input$vbk)
Ma50 <- round(input$t0 - log(1-(input$M50/input$linf))/input$vbk)
S_a <- 1/(1+exp(Sa50 - 0:input$AgeMax))
Mat_a <- 1/(1+exp(Ma50 - 0:input$AgeMax))
L_a <- input$linf*(1-exp(-input$vbk*(0:input$AgeMax - input$t0)))
W_a <- input$lwa * L_a ^ input$lwb
binwidth <- 1
mids <- seq((binwidth/2), input$linf*1.2, by=binwidth)
highs <- mids + (binwidth/2)
lows <- mids - (binwidth/2)
ages <- c(0:input$AgeMax)
if(error==TRUE){
SigmaR <- 0.6
SigmaF <- 0.3
}
if(error==FALSE){
SigmaR <- SigmaF <- 0
}
set.seed(1234)
simdata <- SimData(Nyears=input$nyears, AgeMax=input$AgeMax,
SigmaR=SigmaR, M=input$M, F1=F1, S_a=S_a,
SigmaF=SigmaF, W_a=W_a, L_a=L_a, Mat_a=Mat_a,
Amat=Ma50, Fdynamics=input$f_options,
Rdynamics=input$rec_options, Fequil=Fequil, R0=1000,
CVlen=0.2, highs=highs, mids=mids, lows=lows)
return(simdata)
}
#
pop <- get_sim(error=FALSE)
names(pop)
pop$plb
pop$plb
pop$plba
pop$LF
barplot(pop$LF[20,])
barplot(pop$LF[1,])
par(mfrow=c(5,4))
for(i in 1:nrow(pop$LF))
{barplot(LF[i,])}
for(i in 1:nrow(pop$LF))
{barplot(pop$LF[i,])}
for(i in 1:nrow(pop$LF))
{barplot(pop$LF[i,])}
par(mfrow=c(1,1))
barplot(pop$plba[20,])
dim(pop$plba)
dim(pop$page)
plba*page
pop$plba & pop$page
pop$plba %*% pop$page
pop$page[y,] %*% pop$plba
pop$page[1,] %*% pop$plba
plba[1,]
pop$plba[1,]
barplot(pop$page[1,])
barplot(pop$page[20,])
page[20,]
pop$page
barplot(pop$page[70,])
barplot(pop$page[50,])
pop$page[20,] %*% pop$plba
x <- pop$page[50,] %*% pop$plba
barplot(x)
y <- pop$page[70,] %*% pop$plba
barplot(y)
rowSums(pop$plba)
rowSums(pop$page)
pop$LF[20,]
hist(pop$LF[20,])
source("functions.R")
F1 <- 0.2
R1 <- 1000
if(input$fish_level=="Higher") F2 <- 0.5
if(input$rec_level=="Higher") R2 <- 3000
if(input$fish_level=="Status quo") F2 <- F1
if(input$rec_level=="Status quo") R2 <- R1
sim_snap <- get_sim_snapshot(F1=F1, F2=F2, R1=R1, R2=R2)$plb
sim_snap0 <- get_sim_snapshot(F1=0, F2=0, R1=input$R1, R2=input$R2)$plb
pop <- get_sim(error=FALSE)
pop$LF
barplot(pop$LF[1,])
barplot(pop$LF[20,])
par(mfrow=c(5,4))
for(i in 1:20){barplot(pop$LF[i,])}
dim(pop$plb)
dim(pop$plba)
dim(pop$page)
get_sim <- function(error, F1=0.1, Fequil=0.2){
Sa50 <- round(input$t0 - log(1-(input$S50/input$linf))/input$vbk)
Ma50 <- round(input$t0 - log(1-(input$M50/input$linf))/input$vbk)
S_a <- 1/(1+exp(Sa50 - 0:input$AgeMax))
Mat_a <- 1/(1+exp(Ma50 - 0:input$AgeMax))
L_a <- input$linf*(1-exp(-input$vbk*(0:input$AgeMax - input$t0)))
W_a <- input$lwa * L_a ^ input$lwb
binwidth <- 1
mids <- seq((binwidth/2), input$linf*1.2, by=binwidth)
highs <- mids + (binwidth/2)
lows <- mids - (binwidth/2)
ages <- c(0:input$AgeMax)
if(error==TRUE){
SigmaR <- 0.6
SigmaF <- 0.3
}
if(error==FALSE){
SigmaR <- SigmaF <- 0
}
set.seed(1234)
simdata <- SimData(Nyears=input$nyears, AgeMax=input$AgeMax,
SigmaR=SigmaR, M=input$M, F1=F1, S_a=S_a,
SigmaF=SigmaF, W_a=W_a, L_a=L_a, Mat_a=Mat_a,
Amat=Ma50, Fdynamics=input$f_options,
Rdynamics=input$rec_options, Fequil=Fequil, R0=1000,
CVlen=0.1, highs=highs, mids=mids, lows=lows)
return(simdata)
}
#
pop <- get_sim(error=FALSE)
pop$plb
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
VL <- get_sim(error=FALSE)$VL
VL
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
